// Code generated by "enumer -type=UIMode -transform=snake -trimprefix=UIMode -output ui_mode_gen.go"; DO NOT EDIT.

//
package cmd

import (
	"fmt"
)

const _UIModeName = "responsivecompactfull"

var _UIModeIndex = [...]uint8{0, 10, 17, 21}

func (i UIMode) String() string {
	i -= 2
	if i >= UIMode(len(_UIModeIndex)-1) {
		return fmt.Sprintf("UIMode(%d)", i+2)
	}
	return _UIModeName[_UIModeIndex[i]:_UIModeIndex[i+1]]
}

var _UIModeValues = []UIMode{2, 3, 4}

var _UIModeNameToValueMap = map[string]UIMode{
	_UIModeName[0:10]:  2,
	_UIModeName[10:17]: 3,
	_UIModeName[17:21]: 4,
}

// UIModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UIModeString(s string) (UIMode, error) {
	if val, ok := _UIModeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UIMode values", s)
}

// UIModeValues returns all values of the enum
func UIModeValues() []UIMode {
	return _UIModeValues
}

// IsAUIMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UIMode) IsAUIMode() bool {
	for _, v := range _UIModeValues {
		if i == v {
			return true
		}
	}
	return false
}
